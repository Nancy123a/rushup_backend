service:
 name: rushup

frameworkVersion: ">=1.2.0 <2.0.0"
package:
  exclude:
    - node_modules/**
plugins:
  - serverless-aws-documentation
#  - serverless-domain-manager
provider:
  name: aws
#  apiGateway:
#    restApiId: j9rgxxut6b # REST API resource ID. Default is generated by the framework
#    restApiRootResourceId: ${self:custom.restApiRootResourceId.${self:provider.stage}} # Root resource, represent as / path
  runtime: python2.7
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  region: eu-west-1
  memorySize: 512 # optional, in MB, default is 1024
  timeout: 12 # optional, in seconds, default is 6
  environment: ${file(env.yml):${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:eu-west-1:261650959426:table/user_token"
        - "arn:aws:dynamodb:eu-west-1:261650959426:table/delivery"
        - "arn:aws:dynamodb:eu-west-1:261650959426:table/driver_token"
        - "arn:aws:dynamodb:eu-west-1:261650959426:table/delivery_drivers"
        - "arn:aws:dynamodb:eu-west-1:261650959426:table/delivery/index/identity_id-delivery_date-index"
        - "arn:aws:dynamodb:eu-west-1:261650959426:table/delivery/index/driver_id-delivery_date-index"
        - "arn:aws:dynamodb:eu-west-1:261650959426:table/driver_token/index/username-index"
    - Effect: Allow
      Action:
        - sns:SetEndpointAttributes
        - sns:GetEndpointAttributes
        - sns:CreatePlatformEndpoint
      Resource: "*"
    - Effect: Allow
      Action:
        - sns:publish
      Resource:
        - "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up"
        - "arn:aws:sns:eu-west-1:261650959426:app/GCM/rush_up_driver"
        - "arn:aws:sns:eu-west-1:261650959426:app/APNS_SANDBOX/rush_up_ios_dev"
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: "*"
    - Effect: Allow
      Action:
        - cognito-sync:ListRecords
      Resource: "arn:aws:cognito-sync:*:*:identitypool/*/identity/*/dataset/*"
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource:
        - "arn:aws:states:eu-west-1:261650959426:stateMachine:delivery_timeout"
        - "arn:aws:states:eu-west-1:261650959426:stateMachine:driver_assign"
custom:
  defaultStage: prod
  profiles:
    dev: zeroandonedev
    prod: zeroandonedev
  restApiRootResourceId:
    dev: /dev
    prod: /
#  customDomain:
#    domainName:
#    basePath: ''
#    stage: ${self:provider.stage}
#    createRoute53Record: true
  documentation:
    models:
      -
        name: TokenRequest
        contentType: "application/json"
        schema: ${file(models/tokenRequest.json)}
      -
        name: PushRequest
        contentType: "application/json"
        schema: ${file(models/pushRequest.json)}
      -
        name: Score
        contentType: "application/json"
        schema: ${file(models/score.json)}
      -
        name: ContactSyncRequest
        contentType: "application/json"
        schema: ${file(models/contactSyncRequest.json)}
      -
        name: ContactSyncResponse
        contentType: "application/json"
        schema: ${file(models/contactSyncResponse.json)}
      -
        name: DriverLocationRequest
        contentType: "application/json"
        schema: ${file(models/driverLocationRequest.json)}
      -
        name: DriverStatusRequest
        contentType: "application/json"
        schema: ${file(models/driverStatusRequest.json)}
      -
        name: Driver
        contentType: "application/json"
        schema: ${file(models/driver.json)}
      -
        name: DeliveryDriversResponse
        contentType: "application/json"
        schema: ${file(models/deliveryDriverResponse.json)}
      -
        name: DeliveryRequest
        contentType: "application/json"
        schema: ${file(models/deliveryRequest.json)}
      -
        name: DeliveryStatusRequest
        contentType: "application/json"
        schema: ${file(models/deliveryStatusRequest.json)}
      -
        name: DeliveryPickUpDropoff
        contentType: "application/json"
        schema: ${file(models/deliveryPickUpDropoff.json)}
functions:
  currentTime:
    handler: handler.endpoint
    events:
      - http:
          path: ping
          method: get
  saveDelivery:
    handler: delivery.save_delivery
    events:
      - http:
          path: delivery
          method: post
          authorizer: aws_iam
          documentation:
            summary: "Save an approved delivery"
            requestModels:
              "application/json": DeliveryRequest
            methodResponses:
              - statusCode: '201'
                responseModels:
                  "application/json": DeliveryRequest

  updateDeliveryStatus:
    handler: delivery.update_delivery_status
    events:
      - http:
          path: delivery/{delivery_id}
          method: put
          request:
            parameters:
               paths:
                 delivery_id: true
          authorizer: aws_iam
          documentation:
            summary: "Update delivery report status"
            requestModels:
              "application/json": DeliveryStatusRequest

  getDelivery:
    handler: delivery.get_delivery
    events:
      - http:
          path: delivery/{delivery_id}
          method: get
          request:
            parameters:
               paths:
                 delivery_id: true
          authorizer: aws_iam
          documentation:
            summary: "Get Delivery"
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": DeliveryRequest
  assignDelivery:
    handler: delivery.assign_delivery
    events:
      - http:
          path: delivery/{delivery_id}/assign
          method: put
          request:
            parameters:
              paths:
                delivery_id: true
          authorizer: aws_iam
          documentation:
            summary: "Assign Delivery to a driver"
  saveRushieToken:
    handler: user_push.save_token
    events:
      - http:
          path: rushie/token
          method: post
          authorizer: aws_iam
          documentation:
            summary: "Manage Endpoint platform"
            requestModels:
              "application/json": TokenRequest
      - http:
          path: token
          method: post
          authorizer: aws_iam
          documentation:
            summary: "Manage Endpoint platform"
            requestModels:
              "application/json": TokenRequest
  publishMessage:
    handler: user_push.publish_message
    events:
      - http:
          path: publish
          method: post
          authorizer: aws_iam
          documentation:
            summary: "Send push notification to another Rushie User"
            requestModels:
              "application/json": PushRequest

  createDriverRegistrationCode:
    handler: driver_push.save_registration_code
    events:
      - http:
          path: driver/code/createcode
          method: post
          cors: true
          authorizer: arn:aws:cognito-idp:eu-west-1:261650959426:userpool/eu-west-1_w2rC3VeKI
          documentation:
            summary: "create driver registration code"

  History:
    handler: delivery.get_history
    events:
      - http:
          path: delivery/history
          method: get
          authorizer: aws_iam
          documentation:
            summary: "Delivery History"

  ClearHistory:
    handler: delivery.clear_history
    events:
      - http:
          path: delivery/history/clear
          method: delete
          authorizer: aws_iam
          documentation:
            summary: "Clear History"
  DriverHistory:
    handler: delivery.get_driver_history
    events:
      - http:
          path: driver/history
          method: get
          authorizer: aws_iam
          documentation:
            summary: "Drivery Delivery History"
  saveDriverToken:
    handler: driver_push.save_token
    events:
      - http:
          path: driver/token
          method: post
          authorizer: aws_iam
          documentation:
            summary: "Manage Endpoint platform"
            requestModels:
              "application/json": TokenRequest



  CheckCode:
    handler: driver_push.get_driver_code
    events:
      - http:
          path: driver/code/checkcode
          method: post
          documentation:
            summary: "Check registration code of driver"
            requestModels:
              "application/json": Driver
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": Driver

  updateDriverLocation:
    handler: driver.update_location
    events:
      - http:
          path: driver/location
          method: put
          authorizer: aws_iam
          documentation:
            summary: "Update Driver Location"
            requestModels:
              "application/json": DriverLocationRequest
  updateDeliveryPickupDropOff:
    handler: delivery.pick_up_dropoff_delivery
    events:
      - http:
          path: delivery/{delivery_id}/pickupdropoff
          method: put
          request:
            parameters:
              paths:
                delivery_id: true
          authorizer: aws_iam
          documentation:
            summary: "Update Delivery Pickup and Dropoff"
            requestModels:
              "application/json": DeliveryPickUpDropoff

  getDeliveryDrivers:
    handler: driver.get_delivery_drivers
    events:
      - http:
          path: delivery/{delivery_id}/drivers
          method: get
          request:
            parameters:
              paths:
                delivery_id: true
          authorizer: aws_iam
          documentation:
            summary: "Get Drivers for Delivery"
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": DeliveryDriversResponse
  updateDriverStatus:
    handler: driver.update_driver_status
    events:
      - http:
          path: driver/status
          method: put
          authorizer: aws_iam
          documentation:
            summary: "Update Driver Status"
            requestModels:
              "application/json": DriverStatusRequest
  getDriver:
    handler: driver.get_driver
    events:
      - http:
          path: driver/{driver_id}
          request:
            parameters:
              paths:
                driver_id: true
          method: get
          authorizer: aws_iam
          documentation:
            summary: "Get Driver by id"
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": Driver

  updateDriverScore:
    handler: driver.update_score
    events:
      - http:
          path: driver/score/updatescore
          method: put
          authorizer: aws_iam
          documentation:
            summary: " Update driver score "
            methodResponses:
              - statusCode: '200'
                requestModels:
                  "application/json": Score

  contactSync:
    handler: contacts.sync
    events:
      - http:
          path: contact
          method: post
          authorizer: aws_iam
          documentation:
            summary: "Accept Map of Contacts Ids with phone Number and return a list of Rushie Contacts"
            requestBody:
              description: "Contact Sync Request that hold a map of Ids and Phone numbers"
            requestModels:
              "application/json": ContactSyncRequest
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": ContactSyncResponse
  deliveryTimeout:
    handler: delivery.check_if_delivery_timeout
  getAvailableDrivers:
    handler: driver.get_available_drivers
  proposeDelivery:
    handler: driver_push.propose_delivery
  getDeliveryState:
    handler: delivery.get_delivery_state
  knockMonitor:
    handler: delivery.knock_monitor
  getDistance:
    handler: delivery.get_distance
resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}